* Initialization Tweaks
** Initial setup defaults
   #+BEGIN_SRC emacs-lisp  
   (setq inhibit-startup-message t)              ;;Prevents the initial load screen 
   (tool-bar-mode -1)                            ;;Disables the toolbar
   (fset 'yes-or-no-p 'y-or-n-p)                 ;;Allows using y/n for yes/no
   (global-set-key (kbd "<f5>") 'revert-buffer)  ;;Allows reloading a buffer using F5 directly
   #+END_SRC
** Enable Key-chords
   Allows using simultaneous key presses to do custom functions
   #+BEGIN_SRC emacs-lisp
     (use-package key-chord
       :ensure t
       :init
       (key-chord-define-global "vc" 'forward-char)
       (key-chord-define-global "xc" 'backward-char)
       :config
       (require 'key-chord)
       (setq key-chord-two-keys-delay 0.05) ; default 0.1
       (key-chord-mode 1))
   #+END_SRC
** Muting the bell in Emacs
   Mute the bell in emacs
   #+BEGIN_SRC emacs-lisp  
   (defun my-bell-function ())  ;;Defines an arbitrary function which does nothing
   (setq ring-bell-function 'my-bell-function) ;; remaps the bell function to the above arbitraty function to do nothing
   (setq visible-bell nil)
   #+END_SRC

** Highlight current line
   #+BEGIN_SRC 
   (global-hl-line-mode t)
   #+END_SRC

** Auto-reload the file if it changes on the disk
   #+BEGIN_SRC 
   (global-auto-revert-mode 1)
   (setq auto-revert-verbose nil)
   #+END_SRC
   
** Auto-wrap long lines
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-M-q") 'visual-line-mode)  ;;Allows toggle of word wrapping
   #+END_SRC
   
* Installing Packages
** Multiple-Cursors
   #+BEGIN_SRC emacs-lisp
   (use-package multiple-cursors
   :ensure t
   :bind (("C-S-c C-S-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-c C-<" . mc/mark-all-like-this)
   ("C-c C-* C-*" . mc/mark-more-like-this)
   ("C-* i" . mc/insert-numbers)
   ("C-* s" . mc/sort-regions)
   ("C-* r" . mc/reverse-regions)
   ("M-<mouse-1>" . mc/add-cursor-on-click))
   :init
   (global-unset-key (kbd "M-<down-mouse-1>"))
   :config
   (require 'mc-extras))
   #+END_SRC
*** MC-extras - Additional functionalities for Multiple cursors 
   #+BEGIN_SRC emacs-lisp
    (use-package mc-extras
    :ensure t
    :commands 
    (mc/compare-chars mc/compare-chars-backward mc/compare-chars-forward
    mc/cua-rectangle-to-multiple-cursors
     mc/remove-current-cursor mc/remove-duplicated-cursors)
     :config
     (progn
     (bind-keys :map mc/keymap
     ("C-. C-d" . mc/remove-current-cursor)
     ("C-. d" . mc/remove-duplicated-cursors)
     ("C-. =" . mc/compare-chars))
     (eval-after-load 'cua-base
     '(bind-key "C-. C-," 'mc/cua-rectangle-to-multiple-cursors cua--rectangle-keymap))))
     #+END_SRC
** Changing theme
   #+BEGIN_SRC emacs-lisp
   (use-package monokai-theme
   :ensure t
   :config (load-theme 'monokai t))
   #+END_SRC
** Which-key
   ;; Helps information on the keys 
   #+BEGIN_SRC emacs-lisp  
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC
** I-do mode
   Interactive-do - Allows more informative interaction in the mode-bar
   #+BEGIN_SRC emacs-lisp  
   (setq indo-enable-flex-matching t)
   (setq ido-everywhere t)
   (ido-mode 1)
   #+END_SRC
** iBuffer
   A nicer buffer listing to manage buffers with a nicer interface
   #+BEGIN_SRC emacs-lisp  
   (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC
** Tab-bar for tabbed browsing
Add tabs to scroll using mouse between buffers
#+BEGIN_SRC emacs-lisp  
(use-package tabbar
  :ensure t
  :config
  (tabbar-mode 1))
#+END_SRC

** Winner-mode
   Manage (go forward and backward) window configurations
   #+BEGIN_SRC emacs-lisp  
   (winner-mode 1)
   #+END_SRC
** YASnippet - For inserting snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :ensure t
   :init
   (yas-global-mode 1))
   #+END_SRC
** Counsel - for finding (Browsing files)
   Alternative way for finding files (Modified key map for a better kill ring)
   #+BEGIN_SRC emacs-lisp  
     (use-package counsel
       :ensure t
       :bind ;;Makes the yanking-kill-ring so much cooler!!
       (("M-y" . counsel-yank-pop)
        :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))
   #+END_SRC
** Swiper - for search
    A better way for moving around and search than the default
    #+BEGIN_SRC emacs-lisp  
    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
    	 ("C-r" . swiper)
    	 ("C-c C-r" . ivy-resume)
    	 ("M-x" . counsel-M-x)
    	 ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq enable-recursive-minibuffers t)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-find-library)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))
    #+END_SRC
** Expand Region Tool
   Expands the selected region to the next set of braces
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
** Smart-Parens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
    :ensure t
    :config
  
    (setq sp-show-pair-from-inside nil)
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    
    ;; keybinding management
    (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
    (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)
    
    (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
    (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
    (define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
    (define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)
    
    (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
    (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
    (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)
    
    (define-key smartparens-mode-map (kbd "C-M-n") 'sp-forward-hybrid-sexp)
    (define-key smartparens-mode-map (kbd "C-M-p") 'sp-backward-hybrid-sexp)
    
    (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
    (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)
    
    (define-key smartparens-mode-map (kbd "M-<delete>") 'sp-unwrap-sexp)
    (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)
    
    (define-key smartparens-mode-map (kbd "C-S-<right>") 'sp-forward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-S-<left>") 'sp-forward-barf-sexp)
    (define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)
    
    (define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
    (define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
    (define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
    (define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)
    
    (define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
    (define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
    (define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)
    
    (define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
    (define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)
    
    (define-key smartparens-mode-map (kbd "C-i") 'sp-change-inner)
    (define-key smartparens-mode-map (kbd "M-i") 'sp-change-enclosing)
    
    (bind-key "C-c f" (lambda () (interactive) (sp-beginning-of-sexp 2)) smartparens-mode-map)
    (bind-key "C-c b" (lambda () (interactive) (sp-beginning-of-sexp -2)) smartparens-mode-map)

    
    :diminish smartparens-mode)
   #+END_SRC
* Org-mode specific
** General configuration
   Defines default org-directory variables like org-directory, org-default-notes-file
   #+BEGIN_SRC emacs-lisp
   (custom-set-variables
    '(org-directory (concat (getenv "DROPBOX_DIR") "/orgfiles"))
    '(org-default-notes-file (concat org-directory "/worklog.org"))
    '(org-export-html-postamble nil)
    '(org-startup-indented-t)
   )
   #+END_SRC
;;** Autocompletion for Org-mode
;;   #+BEGIN_SRC emacs-lisp
;;   (use-package org-ac
;;    :ensure t
;;    :init (progn
;;            (require 'org-ac)
;;	    (org-ac/config-default)
;;          ))
;;   #+END_SRC
** Org-capture 
*** Binding C-c c to org-capture
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "\C-c c") 'org-capture)
    #+END_SRC
*** Setting up org-capture files list
    #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(org-directory (concat (getenv "DROPBOX_DIR") "/orgfiles"))
     '(org-default-notes-file (concat org-directory "/worklog.org"))
    )
    (setq org-capture-templates
     '(("a" "Appointment" entry (file+datetree org-default-notes-file "Appointments")
     "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
     ("q" "Note" entry (file+headline org-default-notes-file "Notes")
     "* Note %?\n%T")
     ("l" "Link" entry (file+headline org-default-notes-file "Links")
     "* %? %^L %^g \n%T" :prepend t)
     ("b" "Blog idea" entry (file+headline org-default-notes-file "Blog Topics:")
     "* %?\n%T" :prepend t)
     ("t" "To Do Item" entry (file+headline org-default-notes-file "To Do Items")
     "* %?\n%T" :prepend t)
     ("h" "Eaton HIP" entry (file+headline org-default-notes-file "Eaton HIP")
     "* %?\n%T" :prepend t)
     ("e" "Electrolyzer PHIL" entry (file+headline org-default-notes-file "Electrolyzer PHIL")
     "* %?\n%T" :prepend t)
     ("o" "OptGrid" entry (file+headline org-default-notes-file "OptGrid")
     "* %?\n%T" :prepend t)
     ("n" "NMG" entry (file+headline org-default-notes-file "NMG")
     "* %?\n%T" :prepend t)
     ("m" "East Campus Modeling" entry (file+headline org-default-notes-file "East Campus Modeling")
     "* %?\n%T" :prepend t)
     ("j" "Journal" entry (file+datetree org-default-notes-file)
     "* %?\nEntered on %U\n  %i\n  %a")
     ("s" "Screencast" entry (file org-default-notes-file
     "* %?\n%i\n"))))
    #+END_SRC
** Org-agenda
*** Binding C-c a to org-agenda
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "\C-c a") 'org-agenda)    
    #+END_SRC
*** Setting up org-agenda files list
    #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files (list (concat org-directory "/calendar.org")))
    #+END_SRC
** Org-Mode Bullets
    #+BEGIN_SRC emacs-lisp  
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
** Org-ref (Citation manager when writing papers in Org-mode)
   #+BEGIN_SRC emacs-lisp
   (use-package org-ref
     :ensure t
     :after org
     :init
     (setq reftex-default-bibliography '((concat (getenv "DROPBOX_DIR") "/Research/references.bib")))
     (setq org-ref-bibliography-notes (concat (getenv "DROPBOX_DIR") "/Research/notes/worklog.org")
           org-ref-default-bibliography '((concat (getenv "DROPBOX_DIR") "/Research/references.bib"))
           org-ref-pdf-directory (concat (getenv "DROPBOX_DIR") "/papers/"))
   
     (setq helm-bibtex-bibliography (concat (getenv "DROPBOX_DIR") "/Research/references.bib"))
     (setq helm-bibtex-library-path (concat (getenv "DROPBOX_DIR") "/papers/"))
   
     (setq helm-bibtex-pdf-open-function
           (lambda (fpath)
             (start-process "open" "*open*" "open" fpath)))
   
     (setq helm-bibtex-notes-path (concat (getenv "DROPBOX_DIR") "/Research/notes/worklog.org"))
     :config
     (key-chord-define-global "uu" 'org-ref-cite-hydra/body)
     ;; variables that control bibtex key format for auto-generation
     ;; I want firstauthor-year-title-words
     ;; this usually makes a legitimate filename to store pdfs under.
     (setq bibtex-autokey-year-length 4
           bibtex-autokey-name-year-separator "-"
           bibtex-autokey-year-title-separator "-"
           bibtex-autokey-titleword-separator "-"
           bibtex-autokey-titlewords 2
           bibtex-autokey-titlewords-stretch 1
           bibtex-autokey-titleword-length 5))
   
   (use-package org-ref
   
   :config
   (require 'org-ref)
   (key-chord-define-global "uu" 'org-ref-cite-hydra/body)
   ;; variables that control bibtex key format for auto-generation
   ;; I want firstauthor-year-title-words
   ;; this usually makes a legitimate filename to store pdfs under.
   (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5))
   #+END_SRC
** defining a new class: Book
   #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
   (add-to-list 'org-latex-classes
                '("rj_thesis"
                  "\\documentclass{report}"
                  ("\\chapter{%s}" . "\\chapter*{%s}")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
   #+END_SRC
** Highlight sentences
   Very useful when editing sentences in org-mode
   #+BEGIN_SRC emacs-lisp
   (use-package hl-sentence
   :ensure t
   :config
   (require 'hl-sentence)
   (add-hook 'org-mode-hook 'hl-sentence-mode 1)
   (setq sentence-end-double-space nil)
   
   ;; Configuring the appearance of the highlighted sentence
   (set-face-attribute 'hl-sentence nil
                       :background "#665555"))
   #+END_SRC
** Sentence Navigation
   Forward and backward navigation between sentences (using Key chords)
   #+BEGIN_SRC emacs-lisp
   (use-package sentence-navigation
   :ensure t
   ;; autoloads will be created for all commands and text objects
   ;; when installed with package.el
   :defer t
   :init
   (key-chord-define-global "sd" 'sentence-nav-forward)
   (key-chord-define-global "sa" 'sentence-nav-backward))
   #+END_SRC
** Default Text Navigation/Transpose Key-chords
   #+BEGIN_SRC emacs-lisp
   (key-chord-define-global "es" 'transpose-sentences)
   #+END_SRC
